# WARNING: This configuration is for local development. Do not use it in a production deployment.
#
# This configuration supports basic configuration using environment variables or an .env file
# The following variables are supported:
#
# AIRFLOW_IMAGE_NAME           - Docker image name used to run Airflow.
#                                Default: apache/airflow:2.9.2
# AIRFLOW_UID                  - User ID in Airflow containers
#                                Default: 50000
# AIRFLOW_PROJ_DIR             - Base path to which all the files will be volumed.
#                                Default: .
# Those configurations are useful mostly in case of standalone testing/running Airflow in test/try-out mode
#
# _AIRFLOW_WWW_USER_USERNAME   - Username for the administrator account (if requested).
#                                Default: airflow
# _AIRFLOW_WWW_USER_PASSWORD   - Password for the administrator account (if requested).
#                                Default: airflow
# _PIP_ADDITIONAL_REQUIREMENTS - Additional PIP requirements to add when starting all containers.
#                                Use this option ONLY for quick checks. Installing requirements at container
#                                startup is done EVERY TIME the service is started.
#                                A better way is to build a custom image or extend the official image
#                                as described in https://airflow.apache.org/docs/docker-stack/build.html.
#                                Default: ''
#
# Feel free to modify this file to suit your needs.
---
x-airflow-common:
  &airflow-common
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.9.2}
  # build: .
  env_file:
      - .env
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://sp01_db_postgres:mypostgres12345@postgres:5432/sp01_db_postgres # postgres user: pwd@hostname:5432/db_name
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://sp01_db_postgres:mypostgres12345@postgres:5432/sp01_db_postgres
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    # yamllint disable rule:line-length
    # Use simple http server on scheduler for health checks
    # See https://airflow.apache.org/docs/apache-airflow/stable/administration-and-deployment/logging-monitoring/check-health.html#scheduler-health-check-server
    # yamllint enable rule:line-length
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    # WARNING: Use _PIP_ADDITIONAL_REQUIREMENTS option ONLY for a quick checks
    # for other purpose (development, test and especially production usage) build/extend Airflow image.
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
    # The following line can be used to set a custom config file, stored in the local config folder
    # If you want to use it, outcomment it and replace airflow.cfg with the name of your config file
    # AIRFLOW_CONFIG: '/opt/airflow/config/airflow.cfg'
  volumes:
    - ./docker/airflow/dags:/opt/airflow/dags
    - ./docker/airflow/logs:/opt/airflow/logs
    - ./docker/airflow/config:/opt/airflow/config
    - ./docker/airflow/plugins:/opt/airflow/plugins
  networks:
    - sp_bridge_001
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  postgres:
    build: 
      context: ./docker/postgres
      dockerfile: Dockerfile
    env_file:
      - .env
    image: sp01_db_postgres
    container_name: sp01_db_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5433:5432" # local port 5432 occupied
    volumes:
      - ./docker/postgres/data:/var/lib/postgresql/data
    networks:
      - sp_bridge_001
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    # TEST: docker exec -it sp01_db_postgres psql -U sp01 -d sp01_db_postgres

  # pgadmin:
  #   build:
  #     context: ./docker/pgadmin
  #     dockerfile: Dockerfile
  #   env_file:
  #     - .env
  #   image: sp01_db_pgadmin
  #   container_name: sp01_db_pgadmin
  #   ports:
  #     - "5434:80"
  #   volumes:
  #     - ./docker/pgadmin/data:/var/lib/pgadmin
  #   networks:
  #     - sp_bridge_001
  #   depends_on:
  #     - postgres
  #   # http://localhost:5434

  redis:
    # Redis is limited to 7.2-bookworm due to licencing change
    image: redis:7.2-bookworm
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      # yamllint disable rule:line-length
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      # Required to handle warm shutdown of the celery workers properly
      # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    
  airflow-worker_2:
    <<: *airflow-common
    command: celery worker -q high_cpu
    healthcheck:
      # yamllint disable rule:line-length
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      # Required to handle warm shutdown of the celery workers properly
      # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully  

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    command:
      - bash
      - -c
      - airflow

  # You can enable flower by adding "--profile flower" option e.g. docker-compose --profile flower up
  # or by explicitly targeted on the command line e.g. docker-compose up flower.
  # See: https://docs.docker.com/compose/profiles/
  flower:
    <<: *airflow-common
    command: celery flower
    profiles:
      - flower
    ports:
      - "5555:5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  nifi:  
    build: 
      context: ./docker/nifi
      dockerfile: Dockerfile
    env_file:
      - .env
    image: sp01_etl_nifi
    container_name: sp01_etl_nifi
    environment:
      - SINGLE_USER_CREDENTIALS_USERNAME=${NIFI_USERNAME}
      - SINGLE_USER_CREDENTIALS_PASSWORD=${NIFI_PASSWORD}
    ports:
      # port 8443用於HTTPS通訊
      - "8443:8443"
      # port 8092用於Site-to-Site通訊或其他自定義目的。Site-to-Site讓不同的NiFi instance之間安全傳送資料
      - "8092:8092"
    volumes:
      - ./docker/nifi/conf:/opt/nifi/nifi-1.25.0/conf
      - ./docker/nifi/flowfile:/opt/nifi/nifi-1.25.0/flowfile_repository # 配置目錄，包括 NiFi主要配置文件和流程定義文件 flow.xml.gz
      - ./docker/nifi/database:/opt/nifi/nifi-1.25.0/database_repository # NiFi內部數據庫目錄，用於存儲狀態訊息
      - ./docker/nifi/content:/opt/nifi/nifi-1.25.0/content_repository # FlowFiles內容(metadata)
      - ./docker/nifi/provenance:/opt/nifi/nifi-1.25.0/provenance_repository # 數據溯源記錄
      - ./docker/init-nifi.sh:/opt/nifi/init-nifi.sh
    networks:
      - sp_bridge_001
    # healthcheck:
    #   test: ["CMD", "pg_isready", "-U", "postgres"]
    #   interval: 10s
    #   retries: 6
    #   start_period: 5s
    #   restart: always
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    # https://localhost:8443
  
  nifi-registry-container:
    build:
      context: ./docker/nifi_registry
      dockerfile: Dockerfile
    env_file:
      - .env
    image: sp01_etl_nifi_registry
    container_name: sp01_etl_nifi_registry
    restart: always
    ports:
      - "18080:18080"
    networks:
      - sp_bridge_001
  
  superset:
    build:
      context: ./docker/superset
      dockerfile: Dockerfile
    env_file:
      - .env
    image: sp01_viz_superset
    container_name: sp01_viz_superset
    ports:
      - "8088:8088"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      SUPERSET_ADMIN_USER: ${SUPERSET_ADMIN_USER}
      SUPERSET_ADMIN_PASSWORD: ${SUPERSET_ADMIN_PASSWORD}
      SUPERSET_DATABASE_URI: ${SUPERSET_DATABASE_URI}
      SUPERSET_SECRET_KEY: ${SUPERSET_SECRET_KEY}
      SUPERSET_LOAD_EXAMPLES: "true"
      GOOGLE_APPLICATION_CREDENTIALS: /app/credentials/credentials.json
      SUPERSET_CONFIG_PATH: /app/config/superset_config.py
      REDIS_HOST: redis
      REDIS_PORT: "6379"
    volumes:
      - ./docker/superset/home:/app/superset_home
      - ./docker/superset/config:/app/config
      - ./docker/superset/credentials:/app/credentials
    networks:
      - sp_bridge_001
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/health"]
      interval: 10s
      timeout: 30s
      retries: 5
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    # http://127.0.0.1:8088
    
  
  # vault:
  #   build:
  #     context: ./docker/vault
  #     dockerfile: Dockerfile
  #   env_file:
  #     - .env
  #   image: sp01_vault
  #   container_name: sp01_vault
  #   user: "${UID:-1000}:${GID:-1000}"
  #   cap_add:
  #     - IPC_LOCK
  #     - SETFCAP
  #   security_opt:
  #     - seccomp:unconfined
  #   privileged: true
  #   ports:
  #     - "8200:8200"
  #   volumes:
  #     - vault_logs:/vault/logs
  #     - vault_config:/vault/config
  #     - vault_policies:/vault/policies
  #     - vault_tls:/vault/tls
  #   networks:
  #     - sp_bridge_001
  #   healthcheck:
  #     test: ["CMD", "vault", "status"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5

networks:
  sp_bridge_001:
    driver: bridge

volumes:
  vault_logs:
  vault_config:
  vault_policies:
  vault_tls: