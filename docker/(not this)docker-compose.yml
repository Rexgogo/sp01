# # demo_DE_CV
# x-airflow-common:
#   &airflow-common
#   image: ${AIRFLOW_IMAGE_NAME:-sp01_apache/airflow:2.9.2}
#   environment:
#     &airflow-common-env
#     AIRFLOW__CORE__EXECUTOR: CeleryExecutor
#     AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB}
#     AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB}
#     AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
#     AIRFLOW__CORE__FERNET_KEY: ''
#     AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
#     AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
#     AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
#     AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
#     _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
#   volumes:
#     - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
#     - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
#     - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
#     - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
#   user: "${AIRFLOW_UID:-50000}:0"
#   depends_on:
#     &airflow-common-depends-on
#     postgres:
#       condition: service_healthy

services: 
  
  # airflow-webserver:
  #   <<: *airflow-common
  #   command: webserver
  #   ports:
  #     - "8080:8080"
  #   healthcheck:
  #     test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #     start_period: 30s
  #   restart: always
  #   depends_on:
  #     <<: *airflow-common-depends-on
  #     airflow-init:
  #       condition: service_completed_successfully

  # airflow-scheduler:
  #   <<: *airflow-common
  #   command: scheduler
  #   healthcheck:
  #     test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #     start_period: 30s
  #   restart: always
  #   depends_on:
  #     <<: *airflow-common-depends-on
  #     airflow-init:
  #       condition: service_completed_successfully

  # airflow-worker:
  #   <<: *airflow-common
  #   command: celery worker
  #   healthcheck:
  #     # yamllint disable rule:line-length
  #     test:
  #       - "CMD-SHELL"
  #       - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #     start_period: 30s
  #   environment:
  #     <<: *airflow-common-env
  #     # Required to handle warm shutdown of the celery workers properly
  #     # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
  #     DUMB_INIT_SETSID: "0"
  #   restart: always
  #   depends_on:
  #     <<: *airflow-common-depends-on
  #     airflow-init:
  #       condition: service_completed_successfully

  # airflow-triggerer:
  #   <<: *airflow-common
  #   command: triggerer
  #   healthcheck:
  #     test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #     start_period: 30s
  #   restart: always
  #   depends_on:
  #     <<: *airflow-common-depends-on
  #     airflow-init:
  #       condition: service_completed_successfully

  # airflow-init:
  #   <<: *airflow-common
  #   entrypoint: /bin/bash
  #   # yamllint disable rule:line-length
  #   command:
  #     - -c
  #     - |
  #       if [[ -z "${AIRFLOW_UID}" ]]; then
  #         echo
  #         echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
  #         echo "If you are on Linux, you SHOULD follow the instructions below to set "
  #         echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
  #         echo "For other operating systems you can get rid of the warning with manually created .env file:"
  #         echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
  #         echo
  #       fi
  #       one_meg=1048576
  #       mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
  #       cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
  #       disk_available=$$(df / | tail -1 | awk '{print $$4}')
  #       warning_resources="false"
  #       if (( mem_available < 4000 )) ; then
  #         echo
  #         echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
  #         echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
  #         echo
  #         warning_resources="true"
  #       fi
  #       if (( cpus_available < 2 )); then
  #         echo
  #         echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
  #         echo "At least 2 CPUs recommended. You have $${cpus_available}"
  #         echo
  #         warning_resources="true"
  #       fi
  #       if (( disk_available < one_meg * 10 )); then
  #         echo
  #         echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
  #         echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
  #         echo
  #         warning_resources="true"
  #       fi
  #       if [[ $${warning_resources} == "true" ]]; then
  #         echo
  #         echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
  #         echo "Please follow the instructions to increase amount of resources available:"
  #         echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
  #         echo
  #       fi
  #       mkdir -p /sources/logs /sources/dags /sources/plugins
  #       chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
  #       exec /entrypoint airflow version
  #   # yamllint enable rule:line-length
  #   environment:
  #     <<: *airflow-common-env
  #     _AIRFLOW_DB_MIGRATE: 'true'
  #     _AIRFLOW_WWW_USER_CREATE: 'true'
  #     _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
  #     _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
  #     _PIP_ADDITIONAL_REQUIREMENTS: ''
  #   user: "0:0"
  #   volumes:
  #     - ${AIRFLOW_PROJ_DIR:-.}:/sources

  # airflow-cli:
  #   <<: *airflow-common
  #   profiles:
  #     - debug
  #   environment:
  #     <<: *airflow-common-env
  #     CONNECTION_CHECK_MAX_COUNT: "0"
  #   # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
  #   command:
  #     - bash
  #     - -c
  #     - airflow

  # # You can enable flower by adding "--profile flower" option e.g. docker-compose --profile flower up
  # # or by explicitly targeted on the command line e.g. docker-compose up flower.
  # # See: https://docs.docker.com/compose/profiles/
  # flower:
  #   <<: *airflow-common
  #   command: celery flower
  #   profiles:
  #     - flower
  #   ports:
  #     - "5555:5555"
  #   healthcheck:
  #     test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #     start_period: 30s
  #   restart: always
  #   depends_on:
  #     <<: *airflow-common-depends-on
  #     airflow-init:
  #       condition: service_completed_successfully
  
#___________________________________________________

  # db: 
  #   container_name: sp01_db_mysql
  #   build:
  #     context: ./db
  #   image: sp01_db
  #   ports: 
  #     # 如本機未使用3306:3306，請使用3306:3306
  #     - "3305:3306" 
    # environment:
    #   - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    #   - MYSQL_USER=${MYSQL_USER}
    #   - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    #   - MYSQL_DATABASE=${MYSQL_DATABASE}
  #   volumes:
  #     - ./db/data:/var/lib/mysql
  #   networks:
  #     bridge-001:
  #   healthcheck:
  #     test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"] 
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #   restart: on-failure

  postgres:
    build:
      context: ./postgres
    image: sp01_db_pg
    container_name: sp01_db_pg
    environment:
      - POSTGRES_USER= ${POSTGRES_USER}
      - POSTGRES_PASSWORD= ${POSTGRES_PASSWORD}
      - POSTGRES_DB= ${POSTGRES_DB}
    ports:
      - "5433:5432" # local port 5432 occupied
    volumes:
      - ./postgres/data:/var/lib/postgresql/data
    networks:
      - sp_bridge_001
    # healthcheck:
    #   test: ["CMD", "pg_isready", "-U", "airflow"]
    #   interval: 10s
    #   retries: 6
    #   start_period: 5s
    # restart: always
    # TEST: docker exec -it sp01_db_postgres psql -U sp01 -d sp01_db_postgres

  pgadmin:
    build:
      context: ./pgadmin
    image: sp01_db_pgadmin
    container_name: sp01_db_pgadmin
    ports:
      - "5434:80"
    volumes:
      - ./pgadmin/data:/var/lib/pgadmin
    networks:
      - sp_bridge_001
    depends_on:
      - postgres
    # http://localhost:5434

  nifi:  
    build: 
      context: ./nifi
    image: sp01_etl_nifi
    container_name: sp01_etl_nifi
    restart: always
    ports:
      # port 8443用於HTTPS通訊
      - "8443:8443"
      # port 8092用於Site-to-Site通訊或其他自定義目的。Site-to-Site讓不同的NiFi instance之間安全傳送資料
      - "8092:8092"
    volumes:
      - ./nifi/conf:/opt/nifi/nifi-1.25.0/conf
      - ./nifi/flowfile:/opt/nifi/nifi-1.25.0/flowfile_repository # 配置目錄，包括 NiFi主要配置文件和流程定義文件 flow.xml.gz
      - ./nifi/database:/opt/nifi/nifi-1.25.0/database_repository # NiFi內部數據庫目錄，用於存儲狀態訊息
      - ./nifi/content:/opt/nifi/nifi-1.25.0/content_repository # FlowFiles內容(metadata)
      - ./nifi/provenance:/opt/nifi/nifi-1.25.0/provenance_repository # 數據溯源記錄
      - ./init-nifi.sh:/opt/nifi/init-nifi.sh
    networks:
      - sp_bridge_001
    # healthcheck:
    #   test: ["CMD", "pg_isready", "-U", "postgres"]
    #   interval: 10s
    #   retries: 6
    #   start_period: 5s
    #   restart: always
    depends_on:
      postgres:
        condition: service_healthy
    # https://localhost:8443
  
  # nifi資源管理  
  nifi-registry-container:
    build:
      context: ./nifi_registry
    image: sp01_etl_nifi_registry
    container_name: sp01_etl_nifi_registry
    restart: always
    ports:
      - "18080:18080"
    networks:
      - sp_bridge_001
  
  # spark-master:
    # image: bitnami/spark:3
    # container_name: sp01_spark_master
    # environment:
      # - SPARK_MODE=master
      # - SPARK_MASTER_PORT=7077
      # - SPARK_MASTER_WEBUI_PORT=8080
    # ports:
      # - "8085:8080" # Spark Master Web UI
      # - "7077:7077" # Spark Master
    # networks:
      # sp_bridge_001:

  # spark-worker01:
    # image: bitnami/spark:3
    # container_name: sp01_spark_worker01
    # environment:
      # - SPARK_MODE=worker
      # - SPARK_MASTER_URL=spark://spark-master:7077
      # - SPARK_WORKER_CORES=1
      # - SPARK_WORKER_MEMORY=1G
    # depends_on:
      # - spark-master
    # networks:
      # sp_bridge_001:

  # spark-worker02:
    # image: bitnami/spark:3
    # container_name: sp01_spark_worker02
    # environment:
      # - SPARK_MODE=worker
      # - SPARK_MASTER_URL=spark://spark-master:7077
      # - SPARK_WORKER_CORES=1
      # - SPARK_WORKER_MEMORY=1G
    # depends_on:
      # - spark-master
    # networks:
      # sp_bridge_001:
  
  superset:
    build:
      context: ./superset
    image: sp01_viz_superset
    container_name: sp01_report_superset
    ports:
      - "5435:5435"
    volumes:
      - ./stack/superset/workspace:/app/superset_home
    networks:
      sp_bridge_001:
    depends_on:
      # - postgres
      - mysql
    # https://localhost:5435
    # postgresql://superset:superset_password@postgres:5432/superset_db
  
  zeppelin:
    build:
      context: ./sp001_workdata_analysis/stack/superset
    image: sp01_viz_superset
    container_name: sp1_report_superset
    ports:
      - "5435:5435"
    volumes:
      - ./superset/workspace:/app/superset_home
    networks:
      sp_bridge_001:
    depends_on:
      - postgres
    # postgresql://superset:superset_password@postgres:5432/superset_db


  # prometheus:
  #   build:
  #     context: ./prometheus
  #   image: sp01_mon_prom
  #   container_name: sp01_mon_prom
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./prometheus:/etc/prometheus/prometheus.yml
  #   networks:
  #     sp_bridge_001:
    # 另外使用prometheus.yml配置如下，以獲取Node Exporter和cAdvisor的指標數據
  # global:
  #   scrape_interval: 15s
  # scrape_configs:
  #   - job_name: 'node-exporter'
  #     static_configs:
  #       - targets: ['node-exporter:9100']
  #   - job_name: 'cadvisor'
  #     static_configs:
  #       - targets: ['cadvisor:8080']
    # 與slack、e-mail 串接

  # grafana:
  #   build:
  #     context: ./grafana
  #   image: sp01_mon_grafana
  #   container_name: sp01_mon_grafana
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - ./grafana:/var/lib/grafana
  #   networks:
  #     sp_bridge_001:
    # open Grafana http://localhost:3000, default account/password: admin
    # collect data from Prometheus URL: http://prometheus:9090。

  # 以node-exporter獲取本機系統指標
  # node-exporter:
  #   build:
  #     context: ./node_exporter
  #   image: sp01_mon_node-exporter
  #   container_name: sp01_mon_node-exporter
  #   ports:
  #     - "9100:9100"
  #   volumes:
  #     - /:/host:ro,rslave
  #     - /var/run:/var/run:rw
  #     - /sys:/host/sys:ro
  #     - /var/lib/docker/:/var/lib/docker:ro
  
  # cAdvisor蒐集容器的資源使用狀況
  # cadvisor:
  #   build:
  #     context: ./cadvisor
  #   image: sp01_mon_cadvisor
  #   container_name: sp01_mon_cadvisor
  #   ports:
  #     - "8080:8080"
  #   volumes:
  #     - /:/rootfs:ro
  #     - /var/run:/var/run:rw
  #     - /sys:/sys:ro
  #     - /var/lib/docker/:/var/lib/docker:ro
      
networks:
  sp_bridge_001:
    driver: bridge
  nifi-network:
    driver: bridge
 
volumes:
  db-data:

